<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="proj.xsl"?>
<projects>
  <proj>
    <title>QuestManager</title>
    <tagline>MMORPG Framework for Minecraft</tagline>
    <classification>Hobby</classification>
    <url>http://www.github.com/dove-bren/QuestManager</url>
    <descs>
      <desc>Questing Framework for Minecraft</desc>
      <desc>Minecraft plugin implemented using the Spigot API</desc>
      <desc>Transforms game into MMORPG style experience, as created by the server administrator</desc>
      <desc>Server admins create quests, NPCs, items, rewards, shops, etc.</desc>
      <desc>Framework works through config files, meaning each server has their own unique experience</desc>
      <desc>Massive number of features, made completely configurable</desc>
    </descs>
    <tags>
      <tag>MMORPG</tag>
      <tag>Plugin</tag>
      <tag>Java</tag>
      <tag>Framework</tag>
      <tag>Spigot</tag>
      <tag>Config Files</tag>
      <tag>Massive</tag>
      <tag>Minecraft</tag>
    </tags>
    <img>images/questmanager_0.png</img>
    <longdesc>
    QuestManager allows Minecraft Servers to transform into fully-immersive MMORPGs of almost any style.
    QuestManager works entirely through config files, allowing almost anybody to create quests, NPCs, shops, spells,
    enemies, and more for a completely custom experience every time.
    </longdesc>
    <fulldesc>
      <p>
      QuestManager (QM) is a Minecraft Plugin that transforms the game from a sand-box game into a full-feature MMORPG. The plugin
      works by defining quests, which direct players to complete tasks for certain rewards. In addition, QM adds new ways to interact
      in order to remake the gameplay of Minecraft in a more direct fashion.
      </p>
      <p>
      In addition to outlining quests, QM allows creation of NPCs for a multitude of purposes (inns, shops, etc). It also provides
      interfaces for enemy creation (and spawning mechanics), player parties, skill systems, level-up progression, and more. When
      all of these assets come together, the game is truly transformed away from the creative game that Minecraft is into a
      player-centralized adventure MMORPG.
      </p>
      <p>
      The feature list of QM is large. What makes it truly powerful, however, is that QM runs completely from config. This means that
      the plugin by itself has no quests, NPCs, items, or progression. Instead, the plugin works as a framework with which server
      administrators create their own unique, custom MMORPG. Shifting the content to config also helps make QM easier to interact
      with, as no programming is required what-so-ever. Instead, interfacing with QM involves creating YAML config files in any
      text editor. The config files have been designed to be straightforward, so the most difficult part is creating worthwile
      content!
      </p>
      <p>
      Some of the biggest backend features are in the mechanics of the quests themselves. Quests are composed both of simple data --
      like the name of the quest -- and complex data -- like the quests that must be completed before the quest can be taken. Emphasis
      is placed on how expressive the quest creators can be. Due to this, quests can range from simple quests that can be repeated
      over and over again to long tirades that require a party, involve branching objectives, and can only be taken while a certain
      other quest is being taken. By expanding the possibilities of the quests, QM allows each and every adventure made completely
      unique.
      </p>
      <p>
      A big part of an RPG is progression. Your character is expected to grow and get better. This may come through growth of natural
      ability, improved equipment, or both. QM supports all three options, and leave their implementation completely up to the user.
      The user is responsible for creating all shops, specifying growth rate for stats and level-up experience, difficulty of enemies,
      the effective value for a player's money, and the items themselves. Because of this, progression can be specially tailored to the
      adventure, rather than the opposite.
      </p>
      <p>
      In conjunction with player progression, the user also specifies which skills can be used and how they progress. This includes
      creating crafts and materials that can be made, the rate at which xp is gained and required to level a skill up, and how useful
      the results of the skills are. Like everything else in QM, skills are made to be configured.
      </p>
      <p> 
      </p>
      <p>
      QuestManager is currently in version 1.4, and was last updated August, 2016. Some related works are 
      <a href="project-page.php?page=irontale">Iron Tale</a>, which is a medieval MMORPG designed using QM, and
      <a href="project-page.php?page=questmaker">Quest Maker</a>, which is a small graphical application that helps further simplify
      creating QM configs.
      </p>
    </fulldesc>
    <urltag>questmanager</urltag>
    <screenshots>
      <screenshot>
        <src>images/questmanager_0.png</src>
        <tag>QuestManager</tag>
        <alt>Quest Log</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_31.png</src>
        <alt>Skillbook With Levels</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_1.png</src>
        <tag>QuestManager</tag>
        <alt>Player Stats and Options</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_7.png</src>
        <tag>QuestManager</tag>
        <alt>Interact With NPCs</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_8.png</src>
        <tag>QuestManager</tag>
        <alt>Sleep At Inns</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_15.png</src>
        <tag>QuestManager</tag>
        <alt>Shop Menu</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_17.png</src>
        <tag>QuestManager</tag>
        <alt>NPC Crafts and Trades</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_2.png</src>
        <tag>QuestManager</tag>
        <alt>Forge Metals</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_3.png</src>
        <tag>QuestManager</tag>
        <alt>Strike Metal While It's Hot</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_4.png</src>
        <tag>QuestManager</tag>
        <alt>View Available Recipes</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_5.png</src>
        <tag>QuestManager</tag>
        <alt>Each Recipe Described Process</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_6.png</src>
        <tag>QuestManager</tag>
        <alt>Mine For Ores With Mining</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_9.png</src>
        <tag>QuestManager</tag>
        <alt>Fishing</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_10.png</src>
        <tag>QuestManager</tag>
        <alt>Fishing Minigame</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_11.png</src>
        <tag>QuestManager</tag>
        <alt>Quality-Tagged Resources</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_12.png</src>
        <tag>QuestManager</tag>
        <alt>Cooking's Oven Minigame</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_14.png</src>
        <tag>QuestManager</tag>
        <alt>Cooking's Mixing Interface</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_23.png</src>
        <tag>QuestManager</tag>
        <alt>See Your Damage</alt>
      </screenshot>
    </screenshots>
  </proj>
  <proj>
    <title>Personal Website/Demo Reel</title>
    <url>http://www.github.com/dove-bren/dove-bren.github.io</url>
    <classification>Hobby</classification>
    <tagline>Dynamic Demo Reel Website</tagline>
    <descs>
      <desc>Website used to collect and showcase projects and achievements</desc>
      <desc>Uses back-end data for dynamic webpages instead of static HTML</desc>
      <desc>HTML, CSS, PHP, Javascript, and XSLT</desc>
      <desc>Uses no libraries; everything built from the ground up</desc>
    </descs>
    <tags>
      <tag>Web</tag>
      <tag>PHP</tag>
      <tag>JavaScript</tag>
      <tag>CSS</tag>
      <tag>HTML</tag>
      <tag>XSLT</tag>
      <tag>XML</tag>
      <tag>Demo</tag>
      <tag>JS</tag>
      <tag>dynamic</tag>
      <tag>Website</tag>
      <tag>Webpage</tag>
    </tags>
    <img>images/website.png</img>
    <urltag>personalwebpage</urltag>
    <longdesc>
      My Demo Reel website serves to showcase many of the projects I've completed and provide some description of them. Projects are
      documented with descriptions, screenshots, and the source (where available). In addition, a CV and personal statement are
      presented.
    </longdesc>
    <fulldesc>
    <p>
    I started work on this Demo Reel website in order to showcase projects I've completed that lie outside of my professional
    experience. Despite working to pay my way through college, I've been actively engaged in personal projects in most of my
    free time. These projects range from trivial helper command-line programs to mods to exploratory excercises like writing
    a bitmap codec.
    </p>
    <p>
    Much of my experience comes from these personal projects. In order to provide some description of each of the projects, I list
    them here.
    </p>
    <p>
    This website was created completely from hand. No libraries (save standard libraries like PHP's xsl library) were used. The website
    is a mixture of server-side data (XML and XSLT proxied by PHP), server-side formatting (like in the screenshots page), and
    client-side functionallity. It uses HTML, JavaScript, PHP, XML/XSLT, and CSS. Data about projects and professional experience
    found throughout the website (screenshots, resume, projects page) is created based off of server-side data. This centralized data
    source makes it easy to add data and have the website correctly adjust.
    </p>
    <p>
    I chose to use XSLT to format the data (and XML to store it) purely for the experience. Instead of using an MySQL database and PHP,
    I wanted to work with something I knew less about. While working with it, however, I found it easier to interface with the data
    because it was stored as a plain-text text file. This made making small touch-ups much more straightforward and helped expedite
    the process of adding data. Additionally, adding more data is as simple as editing the file. Moving the website to a different
    server was also much easier, as I didn't have to spend any time at all setting up the database, setting up credentials, and
    making any updates to the backend that might have been needed. Of course, this was acceptable only because the data was not
    sensitive or confidential.
    </p>
    <p>
    Originally, I was hosting the website on my GitHub io page. Because GitHub io pages are static, however, I was unable to use any
    server-side processing. Early versions of the website were made entirely with HTML, XSLT, and Javascript -- with the JavaScript
    fetching the XML and performing the transformation client side. Because the data wasn't sensitive, this worked fine. However,
    implementations of the individual project pages and the screenshots page in JavaScript seemed sloppy to me. In th end, I decided
    to move the page somewhere where I could use server-side processing of data and simply provide clients with already-formatted
    pages.
    </p>
    <p>
    An area I really struggle in is in presentation. There is no greater example than creating color schemes -- like the one for this
    website. I spent some time trying to decide on a base color, and then using palette websites to find colors that worked well with
    it. Figuring out which colors to use, and how exactly to lay out each page have been big challenges.
    </p>
    </fulldesc>
  </proj>
  <proj>
    <title>Iron Tale</title>
    <tagline>Medieval MMORPG</tagline>
    <classification>Hobby</classification>
    <descs>
      <desc>Medieval themed world with <em>197</em> quests</desc>
      <desc>Hundreds of NPCs</desc>
      <desc>Magic System</desc>
      <desc>Balanced and Worthwhile Crafting System</desc>
      <desc>Massive World with over a hundred types of enemies</desc>
      <desc>Gigantic main story and a whole slew of side quests</desc>
      <desc>Over 100 hours of gameplay</desc>
    </descs>
    <tags>
      <tag>MMORPG</tag>
      <tag>Medieval</tag>
      <tag>Spigot</tag>
      <tag>QuestManager</tag>
      <tag>Minecraft</tag>
    </tags>
    <img>images/questmanager_front.png</img>
    <longdesc>Iron Tale is a Medieval MMORPG implemented using 
      <a href="project-page.php?page=questmanager">QuestManager</a>. Iron Tale has 197 quests, hundreds of NPCs,
      fine-tuned skills and crafting, and so much more. Targetted to a more hardcore audience, Iron Tale has no
      shortage of challenges for even the most experiened player.
    </longdesc>
    <fulldesc>
      <p>
      Iron Tale is a Medieval MMORPG made using <a href="project-page.php?page=questmanager">QuestManager</a>. It is a combination
      of mechanics made using QuestMaker, a hand-created map, a unique story, and a Medieval texture pack. The game focuses on
      player progression, and is geared towards experienced players who want a challenge.
      </p>
      <p>
      Iron Tale starts off by letting the player choose what to do. After a small tutorial space, the player is brought into the
      wilderness and left to do what they want. This usually involves finding one of the 4 starting cities that surround the
      starting location, as the first obstacle the player will face is their hunger level. In Iron Tale, food is one of the most
      present dangers throughout the entire game. In order to get food, players must complete quests (either for food or money to
      purchase food) or take up crafting. After this, however, the player is free to play the game in whichever fashion they choose.
      It's entirely possible to stay in the cities and train in crafting. Crafters can provide themselves with goods, or trade their
      crafts to other players. 
      </p>
      <p>
      Should a player choose instead to pursue combat, they again face a large number of choices. Minecraft defaulty has a small
      variety of weapons. Iron Tale takes these and helps diversify them by creating it's own material scale. Instead of Minecraft's
      4-stage material progression -- wood, stone, iron, diamond -- Iron Tale introduces a 6-stage progression. In addition, there
      are a large number of unique weapons and armors that fall between the material grades. In addition, armor and weapons can
      possess additional characteristics that break apart the linear progression even further. For example, a Wolf Helmet might have
      less armor than a copper chainmail helm, but it provides a 10% bonus to damage.
      </p>
      <p>
      Additionally, players can choose to specialize in a combat area. These range from two-handed to using a bow to wielding magic and
      a weapon at the same time. Each combat specialization offers unique bonuses that distinguish each fighting style further. For example,
      sword-and-shield provides a defense bonus while wielding magic and a weapon at the same time yields a bonus in mana recovery rate.
      On top of the style of fighting, each type of weapon (axe, sword, box, etc) has their own skill that makes it beneficial to
      pick a weapon and stick with it. Auxillary skills like Tactics and Focus are also present, which apply to several different combat
      styles and help provide further separation between experienced players using a new skill and players who have no skillbase.
      </p>
      <p>
      Special attention is provided to crafting in Iron Tale. There are 3 major crafting skills, and each are incredibly powerful.
      Armor and Weapons made using Smithing are on par or better than what you can get from the equivalent level'ed quests. Cooking
      provides food items with much more impact than what you can buy. Fashioning items are essential for either of the other two
      crafting professions and for archers. Because crafting is so important, gathering professions are too. Lumberjacks, Fishermen,
      Trappers, and Miners all play very important roles in providing the materials needed for the craftsmen to be able to work.
      </p>
      <p>
      The Quests in Iron Tale fall into two categories: main story quests and side quests. The main story quests start out exactly like
      side quests, but eventually lead the player around the world. Side quests usually revolve around a city's needs, or in the
      personal affairs of a citizen. All four of the starting cities have unique main-story quests, but they all eventually lead to
      the same line of quests. In this way, however, the player gains a different starting to their adventure, and may have different
      feelings about the story itself. Additionally, players will be armed differently.
      </p>
      <p>
      Locations throughout Iron Tale differe greatly. There are lightly wooded areas. There are plains. There are mountain passes, deep
      caves, and expansive deserts. Players may find themselves on the frozen island Yozden, or deep in the Everwoods. Each location
      has different enemies, from zombies and drowened corposes to stone golems. Naturally, areas the player visits later in the
      main story have higher levels and are more difficult. 
      </p>
      <p>
      Iron Tale has been developed along side QuestManager. As a result, Iron Tale is in version 1.4 (or expansion 4). It has been
      deployed on the New Mexico Tech's Minecraft Club Server as well as a local server I run. The server files are available upon
      request.
      </p>
    </fulldesc>
    <urltag>irontale</urltag>
    <screenshots>
      <screenshot>
        <src>images/questmanager_front.png</src>
        <tag>QuestManager</tag>
        <alt>Dark Dungeon</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_16.png</src>
        <tag>QuestManager</tag>
        <alt>Large-Scale Towns and Cities</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_18.png</src>
        <tag>QuestManager</tag>
        <alt>Horra Dungeon's Skids</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_19.png</src>
        <tag>QuestManager</tag>
        <alt>Horra Cathedral</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_20.png</src>
        <tag>QuestManager</tag>
        <alt>The City in the Mountains, Hoax</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_21.png</src>
        <tag>QuestManager</tag>
        <alt>Sarahast Desert</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_22.png</src>
        <tag>QuestManager</tag>
        <alt>Fayden Temple</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_24.png</src>
        <tag>QuestManager</tag>
        <alt>Lake Ingles</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_25.png</src>
        <tag>QuestManager</tag>
        <alt>Valencia Forest</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_26.png</src>
        <tag>QuestManager</tag>
        <alt>The Everwoods</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_27.png</src>
        <tag>QuestManager</tag>
        <alt>Ice Structures in Kleedon</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_28.png</src>
        <tag>QuestManager</tag>
        <alt>Ship Destined for Yozden</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_29.png</src>
        <tag>QuestManager</tag>
        <alt>Icy Landscapes of Yozden</alt>
      </screenshot>
      <screenshot>
        <src>images/questmanager_30.png</src>
        <tag>QuestManager</tag>
        <alt>Snow Fall on Valencian Outpost</alt>
      </screenshot>
    </screenshots>
  </proj>
  <proj>
    <title>Juggernaut's Armory</title>
    <url>http://www.github.com/dove-bren/Juggernaut-Armory</url>
    <classification>Hobby</classification>
    <tagline>Minecraft Combat Mechanic Overhaul</tagline>
    <descs>
      <desc>Minecraft combat rehaul</desc>
      <desc>Minecraft mod, implemented through the Forge API</desc>
      <desc>Splits damage into slashing, crushing, and piercing types</desc>
      <desc>Expands on armor and weapon progression</desc>
      <desc>Provides extensive APIs and configuration options for developers and server admins</desc>
      <desc>Introduces forging process, including: smelting, shaping, and quenching metals</desc>
    </descs>
    <tags>
      <tag>Mod</tag>
      <tag>Java</tag>
      <tag>Forge</tag>
      <tag>Mechanics</tag>
      <tag>Forging</tag>
      <tag>Combat Mechanics</tag>
      <tag>Integratable</tag>
      <tag>Minecraft</tag>
    </tags>
    <img>images/jarmory_1.png</img>
    <urltag>jarmory</urltag>
    <longdesc>
    Juggernaut's Armory rehauls Minecraft's Combat Mechanics by diversifying damage and armor types. It also provides
    more room for progression in the damage calculations, and eliminates a strict 'best armor'. Players are able to
    construct their own armor piece-by-piece and craft weapons to target specific weaknesses.
    </longdesc>
    <fulldesc>
    <p>
      Jaggernaut's Armory is a Forge Mod that introduced a much heavier style of damage, armor, and weapons to Minecraft. Armor
      progression in Vanilla Minecraft is very limited -- a maximum of 20 armor points with a capped damage reduction value. In 1.8
      mechanics, this equates to a flat 80% damage reduction, in steps of 4%. While protection enchantments provide further
      modification and variation, the progression is very linear. In addition, there are no checks and balances to armor (like
      drawbacks for using diamond against iron or gold). Becaues of this, the player simply wears diamond armor as soon as they can,
      and have no need to ever consider again what they're wearing. Juggernaut's Armory (Jarmory) seeks to remedy this in two ways;
      split damage into multiple types, and provide much closer customization of armor. 
      </p>
      <subhead>
      Damage Types
      </subhead>
      <p>
      JARMORY splits damage and protection into different damage types. By default, these are the classic Slashing, Crushing, and
      Piercing damage. In addition, Magic and Other damages are also defined to directly correspond to the respective damage types
      from Vanilla. By doing so, damage and protection amounts are allowed to very in more than a single dimension, which allows
      developers much more freedom when deciding the details of armors and weapons. This added variation enables developers to
      hand-tune where exactly a piece of armor excels, and where it doesn't. In this way, armor and weapons become better balanced,
      and nonlinearity introduced to armor and weapon progression. Both armor and weapons use the split damage types.
      </p>
      <p>
      Each damage type corresponds to different types of weapons and actions. These are:
      </p>
      <list>
        <li>Slashing* - Typical bladed damage. Swords are a good example of where slashing damage comes from. Slashing damage can
        also be found on axes (to a smaller degree).</li>
        <li>Crushing* - Damage from bash attacks or explosions. Punching with fists (including monster bashes to a player) are
        crushing damage. Shovels do pure crushing damage.</li>
        <li>Piercing* - Attacks that pierce (or stab) do piercing damage. The easiest example is arrows -- whether shot with a bow
        or stabbed at by hand.</li>
        <li>Magic - Damage by potions and special damage events. Can also be used by magic mods.</li>
        <li>Other - Damage that doesn't fit into another category. In other words, special damage, like void damage or suffocation.</li>
      </list>
      <p>
      * - the damage type is one of the 3 major types. This means that default vanilla handling (see section below) automatically
      places damage into these categories.
      </p>
      <p>
      Armor protection values and weapon damage values can be viewed like they normally can: simply mouse-over any piece of
      equipment. The damage values are in the tooltips. Protection/damage values for each type are displayed as per the client's
      config.
      </p>
      <subhead>
      Customization of Armor (and Weapons)
      </subhead>
      <p>
      In Vanilla Minecraft, there are only four equipment slots. Jarmory expands on the customizability of the player by expanding on these, by breaking each of these four equipment pieces into a number of components. Each component acts as a modular addition to the piece of equipment itself, combining its strength with it's fellow components to make a single piece of equipment. The components that make up each piece of armor varies per piece -- from left and right vambraces on the chestplate to the Sabatons on your boots. Each component can be made up of different materials, and not all pieces are required to have a functional piece of armor. 
      </p>
      <p>
      Total armor value for each piece of armor is a simple sum of the protection values of all of it's components. There are two major considerations when determining the armor values of a component: the material it's made out of, and what piece it is. Some pieces provide more protection that others. Take, for example, the breastplate in the torso armor piece. The breastplate provides a large chunk of the overall protection, with each pauldron and vambrace producing smaller amounts. Each piece varies in how large it's contribution to the overall protection is on a per-damage-type basis. Some pieces are very important for protecting against slashing, but not piercing or crushing. Different materials excel and suffer against different damage types as well. As a result, a piece of armor made entirely of the same material might not be as effective as a piece made of several different parts carefully selected for each piece.
      </p>
      <p>
      Creating Components
      </p>
      <p>
      Components are created by hand and individually by the player. Each piece requires, in broad terms: 1. Aquiring metals to construct components out of 2. Smelting the metals down in the forge 3. Taking the molten metal and shaping it on an anvil and cutting table 4. Cooling the metal in a trough to finalize the product
      </p>
      <p>
      Jarmory adds several blocks and mechanics to allow the player to perform all of the above. Forge and Brazier blocks are added to construct a Forge construct. This takes metals and melts them down. Tongs are added to allow the player to move the molten metal while it's still hot. A smith's anvil and cutting table allow the player to hammer out and shape metal to the desired shape. Troughs store coolants that quickly cool the shaped metal to produce the component.
      </p>
      <p>
      Armor components are then taken to an armor mannequin (similar to an armor stand) where pieces are added, removed, and swapped from equipment meshes. Weapon components are brought together and assembled on a Weapon Rig. 
      </p>
      <subhead>
      Support for Vanilla
      </subhead>
      <p>
      Because all the new damage types are not native to Vanilla, Vanilla weapons and armor are not set up to use them. To combat this, vanilla items, weapons, and armors are assigned default values based on the type of item they are. For example, swords do their vanilla damage amount, but purely in slashing. Axes have the same attack power they had before, but split between slashing and crushing.
      </p>
      <p>
      Vanilla armor is affected in a similar way. However, armor is a little harder to break down systematically based solely on the armor type. Armor is separated by applying a linear transformation of the default protection type into each main category. This value is a server-side configured value, but defaults to 70%. This means that a piece of armor that has 10 protection will instead have 7 protection in slashing, piercing, and crushing.
      </p>
      <p>
      Finally, armor and weapons that are added by other mods that do not used the defined APIs to provide custom values (see below) are treated the same as Vanilla items.
      </p>
      <subhead>
      Interfacing with Jarmory
      </subhead>
      <p>
      There are two major ways to interface with Jarmory: through configuration (both server-side and client-side. See below) and through the mod API's. For information on the configurations, see below.
      </p>
      <p>
      There are a large number of APIs to allow mods to work very closely with Jarmory. Mods can register their weapons and armor with Jarmory for finely-tuned protection and damage values. As fluids are added, they can be registered to be used as coolants. Different types of fuels can be added. Metals and materials added by other mods can be set up to be usable in the creation of components. Entirely different weapon types can be added. The list goes on and on.
      </p>
      <p>
      Much of the specifics of the interfaces can be found attached the actual API classes. In place of an exhaustive description of each API, here is a list of each API. More information on each can be found on the project's github page (linked above).
      </p>
      <list>
      <li>Weapon API - Used to register weapons with specific damage values</li>
      <li>Armor API - Like the Weapon API, but with Armor</li>
      <li>Metals &amp; Materials - Register custom metals and materials for use in component crafting</li>
      <li>Alloying API - Specify how alloyed materials are made</li>
      <li>Component API - Add recipes for new components</li>
      <li>Custom Armor Pieces* - Create new pieces of armor, with their own set of components</li>
      <li>Custom Weapons - Define new weapon types and the pieces that make them up</li>
      <li>Fuel API - Register fuels that can be used with the braziers (and optionally the forge)</li>
      <li>Coolant API - Define fluids that can be used as coolants and how well they work</li>
      </list>
      <p>
      * - The ArmorPiece API is not an official API. Developers can still create and define new armor pieces and their list of components, but do so in a less-defined manner
      </p>
      <p>
      All of the above API's are expected to be used during the init phase. Doing so before will almost certainly cause Null Pointer Exceptions, and doing so after is not gauranteed to catch your additions before creating caches. While some APIs (like the Weapon API) are very tolerant to changes during execution, no support is available for making modifications later than the init phase.
      </p>
      <subhead>
      Configuration (Server)
      </subhead>
      <p>
      Aside from mod developers, server administrators can also specify exactly how several different components of Jarmory works. Changes made in configuration do not add or specify new things, but dictate exactly how things should operate and what assumptions should be made. For example, serverside configuration dictates at what rate non-defined (vanilla or armor added by other mods that do not register with Jarmory) armor is converted into the respected armor categories. The default value is 70% (so armor with 10 protection ends up with 7 protection in Slashing, Piercing, and Crushing damage types). This value, however, is set through configuration.
      </p>
      <p>
      Jarmory automatically syncronizes all server-side configurations with clients as they connect. This works in single-player mode as well as when running a dedicated server. All properties that are server-bound are located in the dedicated Server section of the config file.
      </p>
      <p>
      As usual, running the mod for the first time creates all neccessary config files with default values. It's recommended you do this to generate the config file before making edits.
      </p>
      <p>
      Descriptions for each config can be found in the generated config file. Please see that for a list of configurable options. (it's changing rapidly in development, so that list will be much more up-to-date than anything I could put here!)
      </p>
      <subhead>
      Configuration (Client)
      </subhead>
      <p>
      Not all configuration is server-bound. Individual configurations are also available. These generally apply to visual preferences, like displaying armor values of 0.0 or hiding them. Like the server configurations, a list of available options can be found in the config file along with descriptions of what they do.
      </p>
      <p>
      In-game modification of the config is available as well. Simply press [ESC] to go to the Minecraft menu, select Mod Options, and select Jarmory.
      </p>
      <p>
      This project description was taken from Jarmory's GitHub README. To view it in markdown (with all of the links), visit
      the GitHub repo by using the link at the top of the page.
      </p>
    </fulldesc>
    <screenshots>
      <screenshot>
        <src>images/jarmory_1.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>The Smith's Anvil</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_2.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Hand-Modeled Blocks</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_3.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Added Materials</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_4.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Guide Books</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_5.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Component Recipes</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_6.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Unique Burning Mechanic</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_7.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Melt Metals To Forge Them</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_8.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Use Tongs To Hold Metal</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_9.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Forge Interface</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_10.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Melt Metals At The Right Temperature</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_11.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Collect Melted Metal For Alloys</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_12.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Tong HUD</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_13.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Shape Hot Metal</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_14.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Cool Metal In Troughs</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_15.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Assemble Armor Piece By Piece</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_16.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Failed Creations Are Scrap</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_17.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Mix-n-Match Equipment Components</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_18.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Added Mechanics Work With Vanilla, Too</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_19.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Swords Do Slashing Damage</alt>
      </screenshot>
      <screenshot>
        <src>images/jarmory_20.png</src>
        <tag>Juggernaut's Armory</tag>
        <alt>Mixed Damage Types</alt>
      </screenshot>
    </screenshots>
  </proj>
  <proj>
    <title>Age Of Titans</title>
    <url>http://www.github.com/dove-bren/AgeOfTitans</url>
    <classification>Club Work</classification>
    <descs>
      <desc>Adds large titans for added difficulty</desc>
      <desc>Provides challenge even for experienced players</desc>
      <desc>Integrates with <a href="http://www.minecraftforum.net/forums/mapping-and-modding/minecraft-mods/2218638-tinkers-construct-2">
      Tinker's Construct</a> and <a href="http://www.minecraftforum.net/forums/mapping-and-modding/minecraft-mods/1292130-thaumcraft-5-2-4-updated-2016-3-17">
      Thaumcraft</a></desc>
      <desc>Used in Age of Titans Modpack for the NMT Minecraft Club Modded Server</desc>
    </descs>
    <tags>
      <tag>Mod</tag>
      <tag>Java</tag>
      <tag>Forge</tag>
      <tag>Titans</tag>
      <tag>Difficult</tag>
      <tag>Club</tag>
      <tag>Tinkers Construct</tag>
      <tag>Thaumcraft</tag>
      <tag>Integration</tag>
    </tags>
    <img>images/ageoftitans_4.png</img>
    <urltag>ageoftitans</urltag>
    <longdesc>
    Minecraft Forge Mod which adds Titans to the game. Titans are incredibly strong, and can even break down your walls! Age of Titans
    is the central mod to the NMT Minecraft Club Server's Age of Titans mod pack.
    </longdesc>
    <fulldesc>
      
    </fulldesc>
    <screenshots>
      <screenshot>
        <src>images/ageoftitans_0.png</src>
        <tag>Age Of Titans</tag>
        <alt>Titan Mob</alt>
      </screenshot>
      <screenshot>
        <src>images/ageoftitans_1.png</src>
        <tag>Age Of Titans</tag>
        <alt>Flesh Titan Mob</alt>
      </screenshot>
      <screenshot>
        <src>images/ageoftitans_2.png</src>
        <tag>Age Of Titans</tag>
        <alt>Titarillium, Titan Amalgam, Vectorium, and Crystal Vinteum</alt>
      </screenshot>
      <screenshot>
        <src>images/ageoftitans_3.png</src>
        <tag>Age Of Titans</tag>
        <alt>Tinker's Construct Integration</alt>
      </screenshot>
      <screenshot>
        <src>images/ageoftitans_4.png</src>
        <tag>Age Of Titans</tag>
        <alt>Thaumcraft Integration</alt>
      </screenshot>
      <screenshot>
        <src>images/ageoftitans_5.png</src>
        <tag>Age Of Titans</tag>
        <alt>Full Set Of Thaumcraft Researches</alt>
      </screenshot>
    </screenshots>
  </proj>
  <proj>
    <title>Quest Maker</title>
    <url>http://www.github.com/dove-bren/QuestMaker</url>
    <classification>Hobby</classification>
    <descs>
      <desc>Quest File Editor</desc>
      <desc>Java Application using JSwing, specifically for QuestManager</desc>
      <desc>Provides GUI interface for quest configuration creation and editing</desc>
      <desc>Convenience software for QuestManager users who don't want to edit configs</desc>
    </descs>
    <tags>
      <tag>Application</tag>
      <tag>Java</tag>
      <tag>JSwing</tag>
      <tag>Massive</tag>
      <tag>MMORPG</tag>
      <tag>QuestManager</tag>
      <tag>Minecraft</tag>
    </tags>
    <img>images/questmaker_3.png</img>
    <urltag>questmaker</urltag>
    <longdesc>
    The QuestManager framework requires a lot of config editing. To address some of the strain, Quest Maker provides a GUI interface
    to the config editing process. The software takes entire projects into consideration, and allows for graphical creation of all
    forms of config involved with a QuestManager world.
    </longdesc>
    <screenshots>
      <screenshot>
        <src>images/questmaker_1.png</src>
        <tag>Quest Maker</tag>
        <alt>Application Home Screen</alt>
      </screenshot>
      <screenshot>
        <src>images/questmaker_2.png</src>
        <tag>Quest Maker</tag>
        <alt>Quest Creation Dialogue</alt>
      </screenshot>
      <screenshot>
        <src>images/questmaker_3.png</src>
        <tag>Quest Maker</tag>
        <alt>Project Settings</alt>
      </screenshot>
      <screenshot>
        <src>images/questmaker_4.png</src>
        <tag>Quest Maker</tag>
        <alt>Spell Creation Dialogue</alt>
      </screenshot>
      <screenshot>
        <src>images/questmaker_5.png</src>
        <tag>Quest Maker</tag>
        <alt>Adding an Effect to a Spell</alt>
      </screenshot>
      <screenshot>
        <src>images/questmaker_6.png</src>
        <tag>Quest Maker</tag>
        <alt>Editing Status Effect on Spell</alt>
      </screenshot>
    </screenshots>
  </proj>
  <!--
  <proj>
    <title>Quest Maker</title>
    <url>http://www.github.com/dove-bren/QuestMaker</url>
    <urltag>questmanager</urltag>
    <tagline></tagline>
    <classification>Hobby</classification>
    <descs>
      <desc>Quest File Editor</desc>
      <desc>Java Application using JSwing, specifically for QuestManager</desc>
      <desc>Provides GUI interface for quest configuration creation and editing</desc>
      <desc>Convenience software for QuestManager users who don't want to edit configs</desc>
    </descs>
    <tags>
      <tag>Application</tag>
      <tag>Java</tag>
      <tag>JSwing</tag>
      <tag>Massive</tag>
      <tag>MMORPG</tag>
      <tag>QuestManager</tag>
      <tag>Minecraft</tag>
    </tags>
    <img>images/questmaker_3.png</img>
    <longdesc>
      desc
    </longdesc>
    <screenshots>
      <screenshot>
        <src>images/questmaker_6.png</src>
        <tag>Quest Maker</tag>
        <alt>Editing Status Effect on Spell</alt>
      </screenshot>
    </screenshots>
  </proj>
  -->
</projects>
